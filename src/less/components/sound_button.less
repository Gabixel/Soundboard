@import "../utils/functions";

// https://developer.chrome.com/blog/flexbox-layout-isn-t-slow
// NICE!!

// TODO: https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/

.soundbutton {
	// Base restyle
	.style();

	// Hidden
	&.hidden {
		display: none;
	}

	&:focus-visible {
		.base-transition(0s);
		box-shadow: 0 0 0 2px var(--buttons-grid-bg),
			0 0 0 4px var(--button-background-hsl);
	}

	&:focus-visible:active {
		box-shadow: 0 0 0 2px var(--buttons-grid-bg),
			0 0 0 4px var(--button-background-hover-hsl);
	}
}

#buttons-grid {
	&.filtering .soundbutton {
		&.filtered .button-theme {
			opacity: 0.15;
		}
	}

	&:not(.has-dragging-child).filtering .soundbutton {
		&:not(.filtered) {
			animation: visual-light 2.5s ease-in-out;

			@keyframes visual-light {
				from {
					box-shadow: 0 0 2px 2px rgb(255 255 255 / 1);
				}

				to {
					box-shadow: 0 0 2px 2px rgb(255 255 255 / 0);
				}
			}
		}
	}

	&.has-dragging-child.filtering .soundbutton {
		&:not(.filtered):not(.dragging) {
			outline: 2px dashed #0f0;
		}

		&.drop-destination:not(.filtered) {
			outline: 3px solid #fff;

			.button-theme {
				opacity: 1;
			}
		}
	}

	&.has-dragging-child .soundbutton {
		.base-transition(0.2s);

		&:not(.dragging) {
			.button-theme {
				opacity: 0.5;

				animation: drag-choose 0.2s ease var(--opacity-delay, 0) normal;

				@keyframes drag-choose {
					from {
						opacity: 1;
					}

					to {
						opacity: 0.5;
					}
				}
			}

			box-shadow: 0 0 2px 2px rgb(255 255 255 / 0);
		}

		&.hovered {
			// .base-transition(); // This removes outline transition
			.button-theme {
				animation: none;
			}
		}

		&.drop-destination,
		&.drop-destination.filtered {
			outline: 3px solid #fff;

			// cursor: ;

			&,
			.button-theme {
				transition: none;
			}

			.button-theme {
				animation: none;

				opacity: 1;
			}
		}

		// Dragging the button
		&.dragging {
			z-index: 1;

			box-shadow: 0 0 2px #000;
			pointer-events: none;

			.button-theme {
				opacity: 0.35;
			}
		}
	}

	&:not(.has-dragging-child) .soundbutton {
		&:hover .button-theme,
		&.file-dragover .button-theme {
			background-color: var(--button-background-hover-hsl);
		}

		&:active .button-theme {
			background-color: var(--button-background-active-hsl);
		}
	}
}

.base-transition(@shadow-time: 0.2s, @outline-time: 0.2s) {
	transition: box-shadow @shadow-time, outline @outline-time;
}

.theme-transition() {
	transition: background-color 0.1s, opacity 0.2s;
}

.style() {
	order: var(--index);

	--hue: 0;
	--saturation: 100%;
	--lightness: 50%;

	// --red: 255;
	// --green: 0;
	// --blue: 0;

	--alpha: 1;

	// Calculates perceived lightness using the sRGB Luma method.
	// Luma = (red * 0.2126 + green * 0.7152 + blue * 0.0722) / 255
	// --luma: calc(var(--red) * 0.2126 + var(--green) * 0.7152 + var(--blue) * 0.0722 / 255);

	// The threshold at which colors are considered "light". Range: decimals from 0 to 1.
	--threshold: 0.5;

	// The threshold at which a darker border will be applied. Range: decimals from 0 to 1.
	--border-threshold: 0.8;

	// Applies a darker border if the luma is higher than the border threshold.
	// --border-alpha: calc((var(--luma) - var(--border-threshold)) * 100);

	--button-background-hsl: hsl(
		var(--hue) var(--saturation) var(--lightness) / var(--alpha)
	);
	--button-background-hover-hsl: hsl(
		var(--hue) var(--saturation) ~"clamp(0%, var(--lightness) - 5%, 100%)"/ 1
	);
	--button-background-active-hsl: hsl(
		var(--hue) var(--saturation) ~"clamp(0%, var(--lightness) - 10%, 100%)"/ 1
	);

	overflow: hidden;
	padding: 4px;

	font-size: var(--button-font-size, 1em);
	word-break: break-word;

	// display: flex;
	// justify-content: flex-start;
	// align-items: center;
	// .flex-center-all();

	border-radius: 5px;

	min-width: 1px;
	min-height: 1px;

	background: none;
	// background-color: var(--button-background-hsl);

	margin: 0;

	outline: 0 solid transparent;

	// animation: none;
	.base-transition();

	position: relative;

	.button-theme {
		.absolute();
		top: 0;
		left: $top;
		.fill-size();

		background-color: var(--button-background-hsl);
		.theme-transition();

		pointer-events: none;

		display: flex;
		.flex-center-all();
	}
}

/*.soundbutton {
	#buttons-grid:not(.has-dragging-child) &:hover,
	#buttons-grid:not(.has-dragging-child) &.dragover {
		// background-color: #5cb811;
		// background: linear-gradient(to bottom, #5cb811 5%, #77d42a 100%);
		background-color: var(--button-background-hover-hsl);
	}

	#buttons-grid:not(.has-dragging-child) &:active {
		// position: relative;
		// top: 1px;
		background-color: var(--button-background-active-hsl);
	}

	#buttons-grid.filtering &.filtered {
		opacity: 0.15;
	}

	#buttons-grid.filtering &:not(.filtered) {
		animation: visual-light 3s normal;

		@keyframes visual-light {
			from {
				box-shadow: 0 0 4px 2px #fff;
			}

			to {
				box-shadow: 0 0 4px 2px rgb(255 255 255 / 0);
			}
		}
	}

	&.dragging {
		z-index: 1;

		opacity: 0.35;

		box-shadow: 0 0 2px rgba(0, 0, 0, var(--alpha));
		pointer-events: none;
	}

	&.hidden {
		display: none;
	}

	#buttons-grid.has-dragging-child &:not(.dragging) {
		animation: drag-choose 0.2s ease var(--opacity-delay, 0) normal;
		opacity: 0.5;

		@keyframes drag-choose {
			from {
				opacity: 1;
			}

			to {
				opacity: 0.5;
			}
		}
	}

	#buttons-grid.has-dragging-child.filtering &:not(.filtered):not(.dragging) {
		transition: outline .2s;
		outline: 2px dashed #0f0;
	}

	#buttons-grid.has-dragging-child &.drop-destination,
	#buttons-grid.has-dragging-child.filtering
		&.drop-destination:not(.filtered):not(.dragging) {
		transition: none;

		// cursor: ;
		opacity: 1;
		outline: 3px solid #fff;
	}

	// &.playing {
	// 	// outline: 1px dashed hsl(var(--hue) 100% 20% / 1);

	// 	// TODO: Playing effect?
	// }

	/*&:focus {
		outline: 3px solid var(--button-background-hover-hsl);
	}* /
}*/
